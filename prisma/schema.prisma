generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model images {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  file_id   String
  url       String? 
  userId    String?   @db.ObjectId
  shopId    String?   @db.ObjectId 
  users     users?    @relation(fields:[userId],references:[id])
  shops     shops?    @relation(fields: [shopId], references: [id])
  products  products? @relation(fields: [productId], references: [id])
  productId String?   @db.ObjectId
}

model users{
  id            String        @id @default(auto()) @map("_id") @db.ObjectId 
  name          String
  email         String        @unique
  role          String        @default("user")
  password      String?
  following     String[]
  avatar        images[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  shopReviews   shopReviews[]
  orders        orders[]
}


model sellers {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String     @unique
  phone_number    String
  country         String
  password        String
  stripeId        String?
  shopId          String?    @db.ObjectId
  shop            shops?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  isDeleted       Boolean    @default(false)
  deletedAt       DateTime?
}


model shops {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  bio           String?
  category      String
  avatar        images[]
  coverBanner   String?
  address       String
  opening_hours String?
  website       String?
  socialLinks   Json[]
  ratings       Float         @default(0)
  reviews       shopReviews[]
  sellerId      String        @unique @db.ObjectId
  sellers       sellers       @relation(fields: [sellerId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  products      products[]
  isDeleted     Boolean       @default(false)
  deletedAt     DateTime?
  orders        orders[]
}

model shopReviews {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      users    @relation(fields: [userId], references: [id])
  rating    Float
  reviews   String?
  shopId    String?  @db.ObjectId
  shops     shops?   @relation(fields: [shopId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model siteConfig {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  categories    String[]
  subCategories Json
  logo          String?
  banner        String?
}

model discountCodes {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  publicName    String
  discountType  String
  discountValue Float
  discountCode  String   @unique
  sellerId      String   @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}


enum productStatus {
  Active
  Pending
  Draft
}

model products {
  id                   String        @id @default(auto()) @map("_id") @db.ObjectId
  title                String
  slug                 String        @unique
  category             String
  subCategory          String
  shortDescription     String
  detailedDescription  String?
  images               images[]
  videoUrl             String?
  tags                 String[]
  brand                String?
  colors               String[]
  sizes                String[]
  startingDate         DateTime?
  endingDate           DateTime?
  stock                Int
  salePrice            Float
  regularPrice         Float
  ratings              Float         @default(0)
  totalSales           Int           @default(0)
  warranty             String
  customSpecifications Json?
  customProperties     Json
  isDeleted            Boolean?      @default(false)
  cashOnDelivery       Boolean
  discountCodes        String[]      @db.ObjectId 
  status               productStatus @default(Active)
  deletedAt            DateTime?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  shopId               String        @db.ObjectId
  shop                 shops         @relation(fields: [shopId], references: [id])
   
}


model userAnalytics {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  userId          String    @unique @db.ObjectId
  country         String?
  city            String?
  device          String?
  lastVisited     DateTime
  actions         Json?
  recommendations Json?
  lastTrained     DateTime? @default(now())
  updatedAt       DateTime  @updatedAt
  createdAt       DateTime  @default(now())
}

model productAnalytics {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  productId       String    @unique
  shopId          String
  views           Int       @default(0)
  cartAdds        Int       @default(0)
  wishListAdds    Int       @default(0)
  purchases       Int       @default(0)
  lastViewedAt    DateTime
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}


enum addressType {
  Home
  Work
  Other
}

model address {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  userId      String          @db.ObjectId
  label       addressType
  name        String
  street      String
  city        String
  zip         String
  country     String
  isDefault   Boolean         @default(true)
  createdAt   DateTime        @default(now())
}


model orders {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  userId            String       @db.ObjectId
  user              users        @relation(fields: [userId], references: [id])
  shopId            String       @db.ObjectId
  shop              shops        @relation(fields: [shopId], references: [id])
  total             Float
  shippingAddressId String?
  couponCode        String?
  discountAmount    Float?
  status            String
  deliveryStatus    String        @default("Ordered")
  items             orderItems[]  @relation("OrderItemsRelation")
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model orderItems {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId         String   @db.ObjectId
  productId       String
  quantity        Int
  price           Float
  selectedOptions Json?
  orders          orders   @relation(fields: [orderId], references: [id], name: "OrderItemsRelation")
  createdAt       DateTime @default(now())
}

model notifications {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  title           String   
  message         String   
  creatorId       String   @db.ObjectId
  receiverId      String   @db.ObjectId
  redirect_link   String   
  isRead          Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model conversationGroup {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  isGroup         Boolean  @default(false)
  creatorId       String   
  participantIds  String[] @db.ObjectId
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model participant {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  conversationId  String    @db.ObjectId
  userId          String?   @db.ObjectId
  sellerId        String?   @db.ObjectId
  lastSeenAt      DateTime?
  isOnline        Boolean   @default(false)
  unreadCount     Int       @default(0)
  muted           Boolean   @default(false)
  joinedAt        DateTime  @default(now())
}

model message {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  conversationId  String    @db.ObjectId
  senderId        String    @db.ObjectId
  senderType      String   
  content         String?
  attachments     String[]
  status          String    @default("sent")
  createdAt       DateTime  @default(now())
  @@unique([conversationId, senderId, createdAt, content])
}